import { GridStateCommunity } from '@mui/x-data-grid/models/gridStateCommunity';
/**
 * @category Pagination
 * @ignore - do not document.
 */
export declare const gridPaginationSelector: (state: GridStateCommunity) => import("@mui/x-data-grid/hooks/features/pagination/gridPaginationInterfaces").GridPaginationState;
/**
 * Get the pagination model
 * @category Pagination
 */
export declare const gridPaginationModelSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, import("@mui/x-data-grid").GridPaginationModel>;
/**
 * Get the index of the page to render if the pagination is enabled
 * @category Pagination
 */
export declare const gridPageSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, number>;
/**
 * Get the maximum amount of rows to display on a single page if the pagination is enabled
 * @category Pagination
 */
export declare const gridPageSizeSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, number>;
/**
 * Get the amount of pages needed to display all the rows if the pagination is enabled
 * @category Pagination
 */
export declare const gridPageCountSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, number>;
/**
 * Get the index of the first and the last row to include in the current page if the pagination is enabled.
 * @category Pagination
 */
export declare const gridPaginationRowRangeSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, {
    firstRowIndex: number;
    lastRowIndex: number;
} | null>;
/**
 * Get the id and the model of each row to include in the current page if the pagination is enabled.
 * @category Pagination
 */
export declare const gridPaginatedVisibleSortedGridRowEntriesSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, {
    id: import("@mui/x-data-grid").GridRowId;
    model: import("@mui/x-data-grid").GridValidRowModel;
}[]>;
/**
 * Get the id of each row to include in the current page if the pagination is enabled.
 * @category Pagination
 */
export declare const gridPaginatedVisibleSortedGridRowIdsSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, import("@mui/x-data-grid").GridRowId[]>;
