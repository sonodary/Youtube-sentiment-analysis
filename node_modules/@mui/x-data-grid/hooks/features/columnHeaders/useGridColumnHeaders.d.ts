import * as React from 'react';
import { GridRenderContext } from '@mui/x-data-grid/models/params/gridScrollParams';
import { GridStateColDef } from '@mui/x-data-grid/models/colDef/gridColDef';
import { GridSortColumnLookup } from '@mui/x-data-grid/hooks/features/sorting';
import { GridFilterActiveItemsLookup } from '@mui/x-data-grid/hooks/features/filter';
import { GridColumnGroupIdentifier, GridColumnIdentifier } from '@mui/x-data-grid/hooks/features/focus';
import { GridColumnMenuState } from '@mui/x-data-grid/hooks/features/columnMenu';
import { GridColumnVisibilityModel } from '@mui/x-data-grid/hooks/features/columns';
import { GridGroupingStructure } from '@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsInterfaces';
export interface UseGridColumnHeadersProps {
    innerRef?: React.Ref<HTMLDivElement>;
    minColumnIndex?: number;
    visibleColumns: GridStateColDef[];
    sortColumnLookup: GridSortColumnLookup;
    filterColumnLookup: GridFilterActiveItemsLookup;
    columnPositions: number[];
    columnHeaderTabIndexState: GridColumnIdentifier | null;
    columnGroupHeaderTabIndexState: GridColumnGroupIdentifier | null;
    columnHeaderFocus: GridColumnIdentifier | null;
    columnGroupHeaderFocus: GridColumnGroupIdentifier | null;
    densityFactor: number;
    headerGroupingMaxDepth: number;
    columnMenuState: GridColumnMenuState;
    columnVisibility: GridColumnVisibilityModel;
    columnGroupsHeaderStructure: GridGroupingStructure[][];
    hasOtherElementInTabSequence: boolean;
}
export interface GetHeadersParams {
    renderContext: GridRenderContext | null;
    minFirstColumn?: number;
    maxLastColumn?: number;
}
export declare const useGridColumnHeaders: (props: UseGridColumnHeadersProps) => {
    renderContext: GridRenderContext | null;
    getColumnHeaders: (params?: GetHeadersParams, other?: {}) => React.JSX.Element | null;
    getColumnsToRender: (params?: GetHeadersParams) => {
        renderedColumns: GridStateColDef[];
        firstColumnToRender: number;
        lastColumnToRender: number;
        minFirstColumn: number;
        maxLastColumn: number;
    } | null;
    getColumnGroupHeaders: (params?: GetHeadersParams) => React.JSX.Element[] | null;
    isDragging: boolean;
    getRootProps: (other?: {}) => {
        style: {
            minHeight: number;
            maxHeight: number;
            lineHeight: string;
        };
    };
    getInnerProps: () => {
        ref: ((instance: HTMLDivElement | null) => void) | null;
        role: string;
    };
    headerHeight: number;
};
