import { GridFilterItem } from '@mui/x-data-grid/models/gridFilterItem';
import { GridStateCommunity } from '@mui/x-data-grid/models/gridStateCommunity';
/**
 * Get the current filter model.
 * @category Filtering
 */
export declare const gridFilterModelSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, import("@mui/x-data-grid").GridFilterModel>;
/**
 * Get the current quick filter values.
 * @category Filtering
 */
export declare const gridQuickFilterValuesSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, any[] | undefined>;
/**
 * @category Visible rows
 * @ignore - do not document.
 */
export declare const gridVisibleRowsLookupSelector: (state: GridStateCommunity) => import("@mui/x-data-grid/hooks/features/filter/gridFilterState").GridVisibleRowsLookupState;
/**
 * @category Filtering
 * @ignore - do not document.
 */
export declare const gridFilteredRowsLookupSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, Record<import("@mui/x-data-grid").GridRowId, boolean>>;
/**
 * @category Filtering
 * @ignore - do not document.
 */
export declare const gridFilteredDescendantCountLookupSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, Record<import("@mui/x-data-grid").GridRowId, number>>;
/**
 * Get the id and the model of the rows accessible after the filtering process.
 * Does not contain the collapsed children.
 * @category Filtering
 */
export declare const gridExpandedSortedRowEntriesSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, {
    id: import("@mui/x-data-grid").GridRowId;
    model: import("@mui/x-data-grid").GridValidRowModel;
}[]>;
/**
 * Get the id of the rows accessible after the filtering process.
 * Does not contain the collapsed children.
 * @category Filtering
 */
export declare const gridExpandedSortedRowIdsSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, import("@mui/x-data-grid").GridRowId[]>;
/**
 * Get the id and the model of the rows accessible after the filtering process.
 * Contains the collapsed children.
 * @category Filtering
 */
export declare const gridFilteredSortedRowEntriesSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, {
    id: import("@mui/x-data-grid").GridRowId;
    model: import("@mui/x-data-grid").GridValidRowModel;
}[]>;
/**
 * Get the id of the rows accessible after the filtering process.
 * Contains the collapsed children.
 * @category Filtering
 */
export declare const gridFilteredSortedRowIdsSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, import("@mui/x-data-grid").GridRowId[]>;
/**
 * Get the id and the model of the top level rows accessible after the filtering process.
 * @category Filtering
 */
export declare const gridFilteredSortedTopLevelRowEntriesSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, {
    id: import("@mui/x-data-grid").GridRowId;
    model: import("@mui/x-data-grid").GridValidRowModel;
}[]>;
/**
 * Get the amount of rows accessible after the filtering process.
 * @category Filtering
 */
export declare const gridExpandedRowCountSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, number>;
/**
 * Get the amount of top level rows accessible after the filtering process.
 * @category Filtering
 */
export declare const gridFilteredTopLevelRowCountSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, number>;
/**
 * @category Filtering
 * @ignore - do not document.
 */
export declare const gridFilterActiveItemsSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, GridFilterItem[]>;
export type GridFilterActiveItemsLookup = {
    [field: string]: GridFilterItem[];
};
/**
 * @category Filtering
 * @ignore - do not document.
 */
export declare const gridFilterActiveItemsLookupSelector: import("@mui/x-data-grid/utils/createSelector").OutputSelector<GridStateCommunity, GridFilterActiveItemsLookup>;
