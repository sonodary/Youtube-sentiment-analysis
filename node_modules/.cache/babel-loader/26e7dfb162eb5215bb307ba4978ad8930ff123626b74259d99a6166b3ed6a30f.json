{"ast":null,"code":"var _jsxFileName = \"/Users/sonodaryuuichirou/Desktop/practice/src/App.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport YoutubeEmbed from \"./youtube_embed\";\nimport WordCloud from 'react-d3-cloud';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [videoData, setVideoData] = useState(null);\n  const [url, setUrl] = useState('');\n  const [comments, setComment] = useState(null);\n  const [commentsList, setCommentsList] = useState(null);\n  const [wordCloud, setWordCloud] = useState(null);\n  const [graphURL, setGraphURL] = useState(null);\n  const handleSubmit = async e => {\n    _s();\n    e.preventDefault();\n\n    // Send the video URL to the Flask backend\n    const response_video = await fetch('http://127.0.0.1:5000/api/video-details', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        url\n      })\n    });\n\n    // Retrieve the video details from the response\n    const data = await response_video.json();\n    setVideoData(data);\n    const response_comment = await fetch('http://127.0.0.1:5000/api/video-comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        url\n      })\n    });\n    // .then(response => {return response.json()})\n    // .then(resonse_json => {return Object.values(resonse_json)})\n    // .then(response_list => {response_list.map(e => tmp.push(e.comment)), setComment(response_list)})\n    // .then(() => setCommentsList(tmp))\n\n    // Retrieve the comment from the response\n    const comment_response = await response_comment.json();\n    const comment_response_lst = Object.values(comment_response);\n    const tmp = [];\n    comment_response_lst.map(e => tmp.push(e.comment));\n    setComment(comment_response_lst);\n    setCommentsList(tmp);\n    useEffect(() => {\n      const fetchImage = async () => {\n        const some_response = await fetch('http://127.0.0.1:5000/api/video-comments-wordCloud', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            commentsList\n          })\n        });\n        const a = await some_response.json();\n        setWordCloud(a);\n      };\n      fetchImage;\n    }, [commentsList]);\n\n    //   useEffect(() => {\n\n    // }, [comments]);\n\n    // const response_wordCloud = await fetch('/api/video-comments-wordCloud', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'image/png',\n    //   },\n    //   body: JSON.stringify({ comments }),\n    // }).then(response => response.blob())\n    // .then(blob => {\n    //   // Convert blob to URL\n    //   const graphUrl = URL.createObjectURL(blob);\n    //   setGraphURL(graphUrl);\n    // })\n  };\n  _s(handleSubmit, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: url,\n        onChange: e => setUrl(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Video Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), videoData && comments && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: videoData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Views: \", videoData.viewCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Likes: \", videoData.likeCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Comments: \", videoData.commentCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), videoData.videoId && /*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n        embedId: videoData.videoId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }, this), comments.map(e => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [e.comment, \" \", e.likeCount, \" \", e.updatedAt]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 30\n      }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: commentsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), graphURL && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: graphURL,\n        alt: \"Word Cloud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 24\n      }, this), graphURL, wordCloud && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: wordCloud\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s2(App, \"lGXAH8sotsghMiZMR/LgXNGxcBM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","YoutubeEmbed","WordCloud","jsxDEV","_jsxDEV","App","_s2","_s","$RefreshSig$","videoData","setVideoData","url","setUrl","comments","setComment","commentsList","setCommentsList","wordCloud","setWordCloud","graphURL","setGraphURL","handleSubmit","e","preventDefault","response_video","fetch","method","headers","body","JSON","stringify","data","json","response_comment","comment_response","comment_response_lst","Object","values","tmp","map","push","comment","useEffect","fetchImage","some_response","a","children","onSubmit","type","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","title","viewCount","likeCount","commentCount","videoId","embedId","updatedAt","src","alt","_c","$RefreshReg$"],"sources":["/Users/sonodaryuuichirou/Desktop/practice/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport YoutubeEmbed from \"./youtube_embed\";\nimport WordCloud from 'react-d3-cloud';\n\nconst App = () => {\n  const [videoData, setVideoData] = useState(null);\n  const [url, setUrl] = useState('');\n  const [comments, setComment] = useState(null);\n  const [commentsList, setCommentsList] = useState(null);\n  const [wordCloud, setWordCloud] = useState(null);\n  const [graphURL, setGraphURL] = useState(null);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Send the video URL to the Flask backend\n    const response_video = await fetch('http://127.0.0.1:5000/api/video-details', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    });\n\n    // Retrieve the video details from the response\n    const data = await response_video.json();\n    setVideoData(data);\n\n    const response_comment = await fetch('http://127.0.0.1:5000/api/video-comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    })\n    // .then(response => {return response.json()})\n    // .then(resonse_json => {return Object.values(resonse_json)})\n    // .then(response_list => {response_list.map(e => tmp.push(e.comment)), setComment(response_list)})\n    // .then(() => setCommentsList(tmp))\n\n\n    // Retrieve the comment from the response\n    const comment_response = await response_comment.json();\n    const comment_response_lst = Object.values(comment_response)\n\n    const tmp = []\n    comment_response_lst.map(e => tmp.push(e.comment))\n    setComment(comment_response_lst);\n    setCommentsList(tmp);\n\n    useEffect(() => {\n      const fetchImage = async () => {\n        const some_response = await fetch('http://127.0.0.1:5000/api/video-comments-wordCloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ commentsList }),\n        });\n        const a = await some_response.json();\n        setWordCloud(a)\n      }\n      fetchImage\n    }, [commentsList])\n\n    \n\n  //   useEffect(() => {\n      \n  // }, [comments]);\n\n    \n\n\n    // const response_wordCloud = await fetch('/api/video-comments-wordCloud', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'image/png',\n    //   },\n    //   body: JSON.stringify({ comments }),\n    // }).then(response => response.blob())\n    // .then(blob => {\n    //   // Convert blob to URL\n    //   const graphUrl = URL.createObjectURL(blob);\n    //   setGraphURL(graphUrl);\n    // })\n\n    \n  };\n\n\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={url} onChange={(e) => setUrl(e.target.value)} />\n        <button type=\"submit\">Get Video Details</button>\n      </form>\n\n      {videoData && comments &&(\n        <div>\n          <h2>{videoData.title}</h2>\n          <p>Views: {videoData.viewCount}</p>\n          <p>Likes: {videoData.likeCount}</p>\n          <p>Comments: {videoData.commentCount}</p>\n          {videoData.videoId && <YoutubeEmbed embedId={videoData.videoId} />}\n          {comments.map(e => <li>{e.comment} {e.likeCount} {e.updatedAt}</li>)}\n          <p>{commentsList}</p>\n          {graphURL && <img src={graphURL} alt=\"Word Cloud\" />}\n          {graphURL}\n          {wordCloud && <p>{wordCloud}</p>}\n          {/* <WordCloud\n            width={1000}\n            height={400}\n            data={[\"こんにちは\", \"うん\"]}\n            fontSize={8}\n            padding={3}\n            spiral=\"rectangular\"\n          /> */}\n        {/* {comment.map(comment=> <p>{comment}</p>)} */}\n        {/* <p>{comments}</p> */}\n        {/* {comments.comment.map((comment, index) => (\n        <div key={index}>\n          <p>{comment}</p>\n          <p>{comments.likeCount[index]}</p>\n          \n        </div>\n        ))} */}\n\n         {/* {comment.comment.map(comment => <li>{comment}</li>)} \n         {comment.likeCount.map(comment => <li>{comment}</li>)}  */}\n                {/* comment.map(Object.values(comment) => \n                <li>{comment.comment}</li>\n                <div>{comment.likeCount}</div>\n                ) */}\n\n          {/* {comment && <p>{comment}</p>} */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}