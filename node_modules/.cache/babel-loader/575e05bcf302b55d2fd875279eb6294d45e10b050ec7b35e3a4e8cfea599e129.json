{"ast":null,"code":"var _jsxFileName = \"/Users/sonodaryuuichirou/Desktop/practice/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport YoutubeEmbed from \"./youtube_embed\";\nimport WordCloud from 'react-d3-cloud';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [videoData, setVideoData] = useState(null);\n  const [url, setUrl] = useState('');\n  const [comments, setComment] = useState(null);\n  const [commentsList, setCommentsList] = useState(null);\n  // const [wordCloud, setWordCloud] = useState(null);\n  const [graphURL, setGraphURL] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Send the video URL to the Flask backend\n    const response_video = await fetch('http://127.0.0.1:5000/api/video-details', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        url\n      })\n    });\n\n    // Retrieve the video details from the response\n    const data = await response_video.json();\n    setVideoData(data);\n    const tmp = [];\n    const response_comment = await fetch('http://127.0.0.1:5000/api/video-comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        url\n      })\n    }).then(response => {\n      return response.json();\n    }).then(resonse_json => {\n      return Object.values(resonse_json);\n    }).then(respnse_list => {\n      respnse_list.map(e => tmp.push(e.comment)), setComment(response_lst);\n    }).then(() => setCommentsList(tmp));\n\n    // Retrieve the comment from the response\n    // const comment_response = await response_comment.json();\n    // const comment_response_lst = Object.values(comment_response)\n\n    // const tmp = []\n    // comment_response_lst.map(e => tmp.push(e.comment))\n    // setComment(comment_response_lst);\n\n    // const some_response = await fetch('http://127.0.0.1:5000/api/video-comments-wordCloud', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({  }),\n    // });\n    // setCommentsList(tmp);\n\n    // const response_wordCloud = await fetch('/api/video-comments-wordCloud', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'image/png',\n    //   },\n    //   body: JSON.stringify({ comments }),\n    // }).then(response => response.blob())\n    // .then(blob => {\n    //   // Convert blob to URL\n    //   const graphUrl = URL.createObjectURL(blob);\n    //   setGraphURL(graphUrl);\n    // })\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: url,\n        onChange: e => setUrl(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Video Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), videoData && comments && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: videoData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Views: \", videoData.viewCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Likes: \", videoData.likeCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Comments: \", videoData.commentCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), videoData.videoId && /*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n        embedId: videoData.videoId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 33\n      }, this), comments.map(e => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [e.comment, \" \", e.likeCount, \" \", e.updatedAt]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 30\n      }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: commentsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), graphURL && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: graphURL,\n        alt: \"Word Cloud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 24\n      }, this), graphURL]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"tjA6dSCwYPQiW6VlG3TmbBYRgBI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","YoutubeEmbed","WordCloud","jsxDEV","_jsxDEV","App","_s","videoData","setVideoData","url","setUrl","comments","setComment","commentsList","setCommentsList","graphURL","setGraphURL","handleSubmit","e","preventDefault","response_video","fetch","method","headers","body","JSON","stringify","data","json","tmp","response_comment","then","response","resonse_json","Object","values","respnse_list","map","push","comment","response_lst","children","onSubmit","type","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","title","viewCount","likeCount","commentCount","videoId","embedId","updatedAt","src","alt","_c","$RefreshReg$"],"sources":["/Users/sonodaryuuichirou/Desktop/practice/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport YoutubeEmbed from \"./youtube_embed\";\nimport WordCloud from 'react-d3-cloud';\n\nconst App = () => {\n  const [videoData, setVideoData] = useState(null);\n  const [url, setUrl] = useState('');\n  const [comments, setComment] = useState(null);\n  const [commentsList, setCommentsList] = useState(null);\n  // const [wordCloud, setWordCloud] = useState(null);\n  const [graphURL, setGraphURL] = useState(null);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Send the video URL to the Flask backend\n    const response_video = await fetch('http://127.0.0.1:5000/api/video-details', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    });\n\n    // Retrieve the video details from the response\n    const data = await response_video.json();\n    setVideoData(data);\n\n    const tmp =[]\n\n    const response_comment = await fetch('http://127.0.0.1:5000/api/video-comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    })\n    .then(response => {return response.json()})\n    .then(resonse_json => {return Object.values(resonse_json)})\n    .then(respnse_list => {respnse_list.map(e => tmp.push(e.comment)), setComment(response_lst)})\n    .then(() => setCommentsList(tmp))\n\n\n    // Retrieve the comment from the response\n    // const comment_response = await response_comment.json();\n    // const comment_response_lst = Object.values(comment_response)\n\n    // const tmp = []\n    // comment_response_lst.map(e => tmp.push(e.comment))\n    // setComment(comment_response_lst);\n\n\n    // const some_response = await fetch('http://127.0.0.1:5000/api/video-comments-wordCloud', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({  }),\n    // });\n    // setCommentsList(tmp);\n\n\n    // const response_wordCloud = await fetch('/api/video-comments-wordCloud', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'image/png',\n    //   },\n    //   body: JSON.stringify({ comments }),\n    // }).then(response => response.blob())\n    // .then(blob => {\n    //   // Convert blob to URL\n    //   const graphUrl = URL.createObjectURL(blob);\n    //   setGraphURL(graphUrl);\n    // })\n\n    \n  };\n\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={url} onChange={(e) => setUrl(e.target.value)} />\n        <button type=\"submit\">Get Video Details</button>\n      </form>\n\n      {videoData && comments &&(\n        <div>\n          <h2>{videoData.title}</h2>\n          <p>Views: {videoData.viewCount}</p>\n          <p>Likes: {videoData.likeCount}</p>\n          <p>Comments: {videoData.commentCount}</p>\n          {videoData.videoId && <YoutubeEmbed embedId={videoData.videoId} />}\n          {comments.map(e => <li>{e.comment} {e.likeCount} {e.updatedAt}</li>)}\n          <p>{commentsList}</p>\n          {graphURL && <img src={graphURL} alt=\"Word Cloud\" />}\n          {graphURL}\n          {/* <WordCloud\n            width={1000}\n            height={400}\n            data={[\"こんにちは\", \"うん\"]}\n            fontSize={8}\n            padding={3}\n            spiral=\"rectangular\"\n          /> */}\n        {/* {comment.map(comment=> <p>{comment}</p>)} */}\n        {/* <p>{comments}</p> */}\n        {/* {comments.comment.map((comment, index) => (\n        <div key={index}>\n          <p>{comment}</p>\n          <p>{comments.likeCount[index]}</p>\n          \n        </div>\n        ))} */}\n\n         {/* {comment.comment.map(comment => <li>{comment}</li>)} \n         {comment.likeCount.map(comment => <li>{comment}</li>)}  */}\n                {/* comment.map(Object.values(comment) => \n                <li>{comment.comment}</li>\n                <div>{comment.likeCount}</div>\n                ) */}\n\n          {/* {comment && <p>{comment}</p>} */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}