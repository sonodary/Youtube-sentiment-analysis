{"ast":null,"code":"var _jsxFileName = \"/Users/sonodaryuuichirou/Desktop/practice/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport YoutubeEmbed from \"./youtube_embed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [videoData, setVideoData] = useState(null);\n  const [url, setUrl] = useState('');\n  const [commentData, setCommentData] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Send the video URL to the Flask backend\n    const response_video = await fetch('http://127.0.0.1:5000/api/video-details', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        url\n      })\n    });\n\n    // Retrieve the video details from the response\n    const data = await response_video.json();\n    setVideoData(data);\n    const response_commment = await fetch('http://127.0.0.1:5000/api/video-comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        url\n      })\n    });\n\n    // Retrieve the video details from the response\n    const comment = await response_comment.json();\n    setCommentData(comment);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: url,\n        onChange: e => setUrl(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Video Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), videoData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: videoData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Views: \", videoData.viewCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Likes: \", videoData.likeCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Comments: \", videoData.commentCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), videoData.videoId && /*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n        embedId: videoData.videoId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"a79PWqC5RVnwmRKCzHdz1e/k2OU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","YoutubeEmbed","jsxDEV","_jsxDEV","App","_s","videoData","setVideoData","url","setUrl","commentData","setCommentData","handleSubmit","e","preventDefault","response_video","fetch","method","headers","body","JSON","stringify","data","json","response_commment","comment","response_comment","children","onSubmit","type","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","title","viewCount","likeCount","commentCount","videoId","embedId","_c","$RefreshReg$"],"sources":["/Users/sonodaryuuichirou/Desktop/practice/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport YoutubeEmbed from \"./youtube_embed\";\n\nconst App = () => {\n  const [videoData, setVideoData] = useState(null);\n  const [url, setUrl] = useState('');\n  const [commentData, setCommentData] = useState(null);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Send the video URL to the Flask backend\n    const response_video = await fetch('http://127.0.0.1:5000/api/video-details', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    });\n\n    // Retrieve the video details from the response\n    const data = await response_video.json();\n    setVideoData(data);\n\n    const response_commment = await fetch('http://127.0.0.1:5000/api/video-comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    });\n\n    // Retrieve the video details from the response\n    const comment = await response_comment.json();\n    setCommentData(comment);\n  };\n\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={url} onChange={(e) => setUrl(e.target.value)} />\n        <button type=\"submit\">Get Video Details</button>\n      </form>\n\n      {videoData && (\n        <div>\n          <h2>{videoData.title}</h2>\n          <p>Views: {videoData.viewCount}</p>\n          <p>Likes: {videoData.likeCount}</p>\n          <p>Comments: {videoData.commentCount}</p>\n          {videoData.videoId && <YoutubeEmbed embedId={videoData.videoId} />}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACQ,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,MAAMC,cAAc,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MAC5EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEb;MAAI,CAAC;IAC9B,CAAC,CAAC;;IAEF;IACA,MAAMc,IAAI,GAAG,MAAMP,cAAc,CAACQ,IAAI,CAAC,CAAC;IACxChB,YAAY,CAACe,IAAI,CAAC;IAElB,MAAME,iBAAiB,GAAG,MAAMR,KAAK,CAAC,0CAA0C,EAAE;MAChFC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEb;MAAI,CAAC;IAC9B,CAAC,CAAC;;IAEF;IACA,MAAMiB,OAAO,GAAG,MAAMC,gBAAgB,CAACH,IAAI,CAAC,CAAC;IAC7CZ,cAAc,CAACc,OAAO,CAAC;EACzB,CAAC;EAGD,oBACEtB,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAMyB,QAAQ,EAAEhB,YAAa;MAAAe,QAAA,gBAC3BxB,OAAA;QAAO0B,IAAI,EAAC,MAAM;QAACC,KAAK,EAAEtB,GAAI;QAACuB,QAAQ,EAAGlB,CAAC,IAAKJ,MAAM,CAACI,CAAC,CAACmB,MAAM,CAACF,KAAK;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1EjC,OAAA;QAAQ0B,IAAI,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAiB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,EAEN9B,SAAS,iBACRH,OAAA;MAAAwB,QAAA,gBACExB,OAAA;QAAAwB,QAAA,EAAKrB,SAAS,CAAC+B;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC1BjC,OAAA;QAAAwB,QAAA,GAAG,SAAO,EAACrB,SAAS,CAACgC,SAAS;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCjC,OAAA;QAAAwB,QAAA,GAAG,SAAO,EAACrB,SAAS,CAACiC,SAAS;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCjC,OAAA;QAAAwB,QAAA,GAAG,YAAU,EAACrB,SAAS,CAACkC,YAAY;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACxC9B,SAAS,CAACmC,OAAO,iBAAItC,OAAA,CAACF,YAAY;QAACyC,OAAO,EAAEpC,SAAS,CAACmC;MAAQ;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC/B,EAAA,CArDID,GAAG;AAAAuC,EAAA,GAAHvC,GAAG;AAuDT,eAAeA,GAAG;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}