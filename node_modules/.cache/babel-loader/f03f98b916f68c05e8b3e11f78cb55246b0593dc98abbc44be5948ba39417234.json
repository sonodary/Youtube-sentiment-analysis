{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _d3Shape = require(\"d3-shape\");\nvar _stackSeries = require(\"../internals/stackSeries\");\nvar _defaultizeValueFormatter = _interopRequireDefault(require(\"../internals/defaultizeValueFormatter\"));\n// For now it's a copy past of bar charts formatter, but maybe will diverge later\nconst formatter = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = (0, _stackSeries.getStackingGroups)(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset ?? [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined) {\n      throw new Error([`MUI: line series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    // Get stacked values, and derive the domain\n    const {\n      ids,\n      stackingOrder,\n      stackingOffset\n    } = stackingGroup;\n    const stackedSeries = (0, _d3Shape.stack)().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = (0, _extends2.default)({}, series[id], {\n        data: dataKey ? dataset.map(d => d[dataKey]) : series[id].data,\n        stackedData: stackedSeries[index].map(_ref => {\n          let [a, b] = _ref;\n          return [a, b];\n        })\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: (0, _defaultizeValueFormatter.default)(completedSeries, v => v.toLocaleString())\n  };\n};\nvar _default = formatter;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_extends2","_d3Shape","_stackSeries","_defaultizeValueFormatter","formatter","params","dataset","seriesOrder","series","stackingGroups","getStackingGroups","d3Dataset","forEach","id","data","undefined","index","length","push","Error","join","completedSeries","stackingGroup","ids","stackingOrder","stackingOffset","stackedSeries","stack","keys","map","dataKey","order","offset","d","stackedData","_ref","a","b","v","toLocaleString","_default"],"sources":["/Users/sonodaryuuichirou/node_modules/@mui/x-charts/LineChart/formatter.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _d3Shape = require(\"d3-shape\");\nvar _stackSeries = require(\"../internals/stackSeries\");\nvar _defaultizeValueFormatter = _interopRequireDefault(require(\"../internals/defaultizeValueFormatter\"));\n// For now it's a copy past of bar charts formatter, but maybe will diverge later\nconst formatter = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = (0, _stackSeries.getStackingGroups)(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset ?? [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined) {\n      throw new Error([`MUI: line series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    // Get stacked values, and derive the domain\n    const {\n      ids,\n      stackingOrder,\n      stackingOffset\n    } = stackingGroup;\n    const stackedSeries = (0, _d3Shape.stack)().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = (0, _extends2.default)({}, series[id], {\n        data: dataKey ? dataset.map(d => d[dataKey]) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: (0, _defaultizeValueFormatter.default)(completedSeries, v => v.toLocaleString())\n  };\n};\nvar _default = formatter;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}