{"ast":null,"code":"import toArray from \"rc-util/es/Children/toArray\";\nimport { useMemo } from 'react';\nimport warning from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  var clone = rowItem;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    process.env.NODE_ENV !== \"production\" ? warning(span === undefined, 'Descriptions', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return clone;\n}\n// Convert children into items\nvar transChildren2Items = function transChildren2Items(childNodes) {\n  return toArray(childNodes).map(function (node) {\n    return Object.assign({}, node === null || node === void 0 ? void 0 : node.props);\n  });\n};\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  var rows = [];\n  var tmpRow = [];\n  var rowRestCol = mergedColumn;\n  rowItems.filter(function (n) {\n    return n;\n  }).forEach(function (rowItem, index) {\n    var span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    var mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      tmpRow.push(getFilledItem(rowItem, rowRestCol, span));\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      tmpRow.push(getFilledItem(rowItem, rowRestCol, mergedSpan));\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return rows;\n}\nvar useRow = function useRow(mergedColumn, items, children) {\n  var rows = useMemo(function () {\n    if (Array.isArray(items)) {\n      return getCalcRows(items, mergedColumn);\n    }\n    return getCalcRows(transChildren2Items(children), mergedColumn);\n  }, [items, children, mergedColumn]);\n  return rows;\n};\nexport default useRow;","map":{"version":3,"names":["toArray","useMemo","warning","getFilledItem","rowItem","rowRestCol","span","clone","undefined","Object","assign","process","env","NODE_ENV","transChildren2Items","childNodes","map","node","props","getCalcRows","rowItems","mergedColumn","rows","tmpRow","filter","n","forEach","index","mergedSpan","length","push","useRow","items","children","Array","isArray"],"sources":["/Users/sonodaryuuichirou/Desktop/practice/node_modules/antd/es/descriptions/hooks/useRow.js"],"sourcesContent":["import toArray from \"rc-util/es/Children/toArray\";\nimport { useMemo } from 'react';\nimport warning from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  let clone = rowItem;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    process.env.NODE_ENV !== \"production\" ? warning(span === undefined, 'Descriptions', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return clone;\n}\n// Convert children into items\nconst transChildren2Items = childNodes => toArray(childNodes).map(node => Object.assign({}, node === null || node === void 0 ? void 0 : node.props));\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  const rows = [];\n  let tmpRow = [];\n  let rowRestCol = mergedColumn;\n  rowItems.filter(n => n).forEach((rowItem, index) => {\n    const span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    const mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      tmpRow.push(getFilledItem(rowItem, rowRestCol, span));\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      tmpRow.push(getFilledItem(rowItem, rowRestCol, mergedSpan));\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return rows;\n}\nconst useRow = (mergedColumn, items, children) => {\n  const rows = useMemo(() => {\n    if (Array.isArray(items)) {\n      return getCalcRows(items, mergedColumn);\n    }\n    return getCalcRows(transChildren2Items(children), mergedColumn);\n  }, [items, children, mergedColumn]);\n  return rows;\n};\nexport default useRow;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}